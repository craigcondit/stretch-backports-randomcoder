diff -ur cyrus-sasl2-2.1.27~101-g0780600+dfsg.orig/Makefile.am cyrus-sasl2-2.1.27~101-g0780600+dfsg/Makefile.am
--- cyrus-sasl2-2.1.27~101-g0780600+dfsg.orig/Makefile.am	2017-03-19 07:50:31.000000000 +0000
+++ cyrus-sasl2-2.1.27~101-g0780600+dfsg/Makefile.am	2017-03-19 07:54:34.000000000 +0000
@@ -45,6 +45,7 @@
 ################################################################
 
 do_subst = sed -e 's,[@]LIB_DOOR[@],$(LIB_DOOR),g' \
+               -e 's,[@]LIB_CRYPT[@],$(LIB_CRYPT),g' \
 	       -e 's,[@]SASL_DL_LIB[@],$(SASL_DL_LIB),g' \
 	       -e 's,[@]LIBS[@],$(LIBS),g' \
 	       -e 's,[@]VERSION[@],$(VERSION),g' \
diff -ur cyrus-sasl2-2.1.27~101-g0780600+dfsg.orig/lib/Makefile.am cyrus-sasl2-2.1.27~101-g0780600+dfsg/lib/Makefile.am
--- cyrus-sasl2-2.1.27~101-g0780600+dfsg.orig/lib/Makefile.am	2017-03-19 07:50:31.000000000 +0000
+++ cyrus-sasl2-2.1.27~101-g0780600+dfsg/lib/Makefile.am	2017-03-19 07:54:47.000000000 +0000
@@ -74,7 +74,7 @@
 libsasl2_la_SOURCES = $(common_sources) $(common_headers)
 libsasl2_la_LDFLAGS = -version-info $(sasl_version) -no-undefined -Wl,--version-script=$(top_srcdir)/Versions
 libsasl2_la_DEPENDENCIES = $(LTLIBOBJS) $(top_srcdir)/Versions
-libsasl2_la_LIBADD = $(SASL_DL_LIB) $(LIB_SOCKET) $(LIB_DOOR)
+libsasl2_la_LIBADD = $(SASL_DL_LIB) $(LIB_SOCKET) $(LIB_DOOR) $(LIB_CRYPT)
 
 if MACOSX
 framedir = /Library/Frameworks/SASL2.framework
Only in cyrus-sasl2-2.1.27~101-g0780600+dfsg/lib: Makefile.am.orig
Only in cyrus-sasl2-2.1.27~101-g0780600+dfsg/lib: Makefile.am.rej
diff -ur cyrus-sasl2-2.1.27~101-g0780600+dfsg.orig/lib/checkpw.c cyrus-sasl2-2.1.27~101-g0780600+dfsg/lib/checkpw.c
--- cyrus-sasl2-2.1.27~101-g0780600+dfsg.orig/lib/checkpw.c	2017-03-19 07:50:31.000000000 +0000
+++ cyrus-sasl2-2.1.27~101-g0780600+dfsg/lib/checkpw.c	2017-03-19 07:51:04.000000000 +0000
@@ -95,6 +95,23 @@
 # endif
 #endif
 
+/******************************
+ * crypt(3) patch start       *
+ ******************************/
+char *crypt(const char *key, const char *salt);
+
+/* cleartext password formats */
+#define PASSWORD_FORMAT_CLEARTEXT 1
+#define PASSWORD_FORMAT_CRYPT 2
+#define PASSWORD_FORMAT_CRYPTTRAD 3
+#define PASSWORD_SALT_BUF_LEN 22
+
+/* weeds out crypt(3) password's salt */
+int _sasl_get_salt (char *dest, char *src, int format);
+
+/******************************
+ * crypt(3) patch stop        *
+ ******************************/
 
 /* we store the following secret to check plaintext passwords:
  *
@@ -142,7 +159,51 @@
 				       "*cmusaslsecretPLAIN",
 				       NULL };
     struct propval auxprop_values[3];
-    
+
+	/******************************
+	 * crypt(3) patch start       *
+	 * for password format check  *
+	 ******************************/
+    sasl_getopt_t *getopt;
+    void *context;
+    const char *p = NULL;
+	/**
+	 * MD5: 12 char salt
+	 * BLOWFISH: 16 char salt
+	 */
+	char salt[PASSWORD_SALT_BUF_LEN];
+	int password_format;
+
+	/* get password format from auxprop configuration */
+	if (_sasl_getcallback(conn, SASL_CB_GETOPT, &getopt, &context) == SASL_OK) {
+		getopt(context, NULL, "password_format", &p, NULL);
+	}
+
+	/* set password format */
+	if (p) {
+		/*
+		memset(pass_format_str, '\0', PASSWORD_FORMAT_STR_LEN);
+		strncpy(pass_format_str, p, (PASSWORD_FORMAT_STR_LEN - 1));
+		*/
+		/* modern, modular crypt(3) */
+		if (strncmp(p, "crypt", 11) == 0)
+			password_format = PASSWORD_FORMAT_CRYPT;
+		/* traditional crypt(3) */
+		else if (strncmp(p, "crypt_trad", 11) == 0)
+			password_format = PASSWORD_FORMAT_CRYPTTRAD;
+		/* cleartext password */
+		else
+			password_format = PASSWORD_FORMAT_CLEARTEXT;
+	} else {
+		/* cleartext password */
+		password_format = PASSWORD_FORMAT_CLEARTEXT;
+	}
+
+	/******************************
+	 * crypt(3) patch stop        *
+	 * for password format check  *
+	 ******************************/
+
     if (!conn || !userstr)
 	return SASL_BADPARAM;
 
@@ -187,15 +248,23 @@
 	&& (!auxprop_values[1].values || !auxprop_values[1].values[0])) {
 	return SASL_NOUSER;
     }
-        
-    /* At the point this has been called, the username has been canonified
-     * and we've done the auxprop lookup.  This should be easy. */
-    if(auxprop_values[0].name
-       && auxprop_values[0].values
-       && auxprop_values[0].values[0]
-       && !strcmp(auxprop_values[0].values[0], passwd)) {
-	/* We have a plaintext version and it matched! */
-	return SASL_OK;
+    
+    /* get salt */
+     _sasl_get_salt(salt, (char *) auxprop_values[0].values[0], password_format);
+
+    /* crypt(3)-ed password? */
+    if (password_format != PASSWORD_FORMAT_CLEARTEXT) {
+        /* compare password */
+        if (auxprop_values[0].name && auxprop_values[0].values && auxprop_values[0].values[0] && strcmp(crypt(passwd, salt), auxprop_values[0].values[0]) == 0)
+            return SASL_OK;
+        else
+            return SASL_BADAUTH;
+    } else if (password_format == PASSWORD_FORMAT_CLEARTEXT) {
+        /* compare passwords */
+        if (auxprop_values[0].name && auxprop_values[0].values && auxprop_values[0].values[0] && strcmp(auxprop_values[0].values[0], passwd) == 0)
+            return SASL_OK;
+        else
+            ret = SASL_BADAUTH;     
     } else if(auxprop_values[1].name
 	      && auxprop_values[1].values
 	      && auxprop_values[1].values[0]) {
@@ -1095,3 +1164,37 @@
 #endif
     { NULL, NULL }
 };
+
+/* weeds out crypt(3) password's salt */
+int _sasl_get_salt (char *dest, char *src, int format) {
+	int num;	/* how many characters is salt long? */
+	switch (format) {
+		case PASSWORD_FORMAT_CRYPT:
+			/* md5 crypt */
+			if (src[1] == '1')
+				num = 12;
+			/* blowfish crypt */
+			else if (src[1] == '2')
+				num = (src[1] == '2' && src[2] == 'a') ? 17 : 16;
+			/* traditional crypt */
+			else
+				num = 2;
+			break;
+	
+		case PASSWORD_FORMAT_CRYPTTRAD:
+			num = 2;
+			break;
+
+		default:
+			return 1;
+	}
+
+	/* destroy destination */
+	memset(dest, '\0', (num + 1));
+
+	/* copy salt to destination */
+	strncpy(dest, src, num);
+
+	return 1;
+}
+
